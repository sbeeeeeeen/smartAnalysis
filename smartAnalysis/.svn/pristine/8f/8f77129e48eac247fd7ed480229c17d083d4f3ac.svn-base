package kr.or.ddit.profit.web;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import kr.or.ddit.analysis_res.model.AnalysisCodeVo;
import kr.or.ddit.analysis_res.model.AnalysisRecVo;
import kr.or.ddit.analysis_res.model.AnalysisResVo;
import kr.or.ddit.analysis_res.service.AnalysisResServiceInf;
import kr.or.ddit.industry.service.IndustryServiceInf;
import kr.or.ddit.member.model.MemberVo;
import kr.or.ddit.profit.model.ProfitVo;
import kr.or.ddit.profit.service.ProfitServiceInf;
import kr.or.ddit.region.service.RegionServiceInf;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.http.HttpRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;


@RequestMapping("/profit")
@Controller
public class ProfitController {
	
	@Resource(name="industryService")
	private IndustryServiceInf indService;
	
	@Resource(name="analysisResService")
	private AnalysisResServiceInf analysisService;
	
	@Resource(name="regionService")
	private RegionServiceInf regionService;
	
	@Resource(name="profitService")
	private ProfitServiceInf profitService;
	
	
	@RequestMapping("/proSelect")
	public String proSelect( Model model){
		return "proSelect";
	}
	
	
	
	@RequestMapping("/result")
	public String proResult(@RequestParam("addr")String addr,
							@RequestParam("ujcode")List<String> ujList,
							@RequestParam("latlngJson")String latlng,
							@RequestParam(required=false, value="radius") String radius,
							HttpSession session,
							ProfitVo profitVo,
							Model model){
		String mem_id = ((MemberVo)session.getAttribute("memberVo")).getMem_id();

		
		//analysis_res insert
		AnalysisResVo anVo = new AnalysisResVo();
		anVo.setAn_div('3');
		anVo.setMem_id(mem_id);
		int an_num = insertAnalysisRes(anVo);
		
		//profit insert
		profitVo.setAN_NUM(an_num);
		profitService.insertProfit(profitVo);
		
		//analysis_code insert
		for(String industry : ujList){
			Map<String, Object> data = new HashMap<String, Object>();
			data.put("an_num", an_num);
			data.put("ind_code", industry);
			data.put("dong", addr.split(" ")[2]);
			insertAnalysisCode(data);
		}
		
		
		//analysis_rec insert
		JSONObject jsonobject = new JSONObject(latlng);
		JSONArray jsonArray = jsonobject.getJSONArray("latlng");
		for(int i=0; i<jsonArray.length(); i++){
			AnalysisRecVo arVo = new AnalysisRecVo();
			arVo.setAN_NUM(an_num);
			arVo.setAN_SHAPE(jsonArray.length()==1?radius==null?'1':'2':'3');
			arVo.setAN_RAD(radius==null?0:Double.parseDouble(radius));
			arVo.setAN_COORX(jsonArray.getJSONObject(i).getDouble("lng"));
			arVo.setAN_COORY(jsonArray.getJSONObject(i).getDouble("lat"));
			insertAnalysisRec(arVo);
		}
		
		model.addAllAttributes(results(an_num));
		model.addAttribute("profitVo", profitVo);
		return "proResult";
	}
	
	//수익분석 보고서 가져갈 것들
	public Map<String, Object> results(int an_num){
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		
		//ac_vo List
		List<AnalysisCodeVo> acVoList = analysisService.getAnalysisCodeVo(an_num);
		resultMap.put("acVoList", acVoList);
//		long reg_code = acVoList.get(0).getREG_CODE();
		
		//분석시점
		resultMap.put("an_dt", acVoList.get(0).getAN_DT());
		
		//월목표 매출 (임의로)
		ProfitVo profitVo = profitService.getProfit(an_num);
		int test = profitVo.getPR_BDPAY()*profitVo.getPR_INGUN();
		int ingunfixing = (int) (profitVo.getPR_INGUN()*0.7);	//고정인건비
		int ingunVar = (int) (profitVo.getPR_INGUN()*0.3);		//변동인건비
		//초기 투자비용 
		int allInvestCost = profitVo.getPR_BDPAY()+profitVo.getPR_INTE()
							+profitVo.getPR_SBPAY()+profitVo.getPR_MEM()+profitVo.getPR_OTPAY();
		int pr_periPay = allInvestCost/(profitVo.getPR_PERI()*12);		//감가상각비
		int loan_interest = (int) ((profitVo.getPR_AM()*(profitVo.getPR_EJ()*0.01))/12);	//대출금의 이자
		int allInvestCost_interest = (int) (allInvestCost*0.02);							//초기 투자비용의 이자 2%
		int monthPay = pr_periPay+loan_interest+allInvestCost_interest;						//초기 투자비용의 월 발생비용
		
		//total1(월세+고정인건비+월 발생비용+기타비용)
		//total2(재료비+변동인건비)
		System.out.println("월세="+profitVo.getPR_RTPAY());
		System.out.println("고정인건비="+ingunfixing);
		System.out.println("월 발생비용="+monthPay);
		System.out.println("기타비용="+profitVo.getPR_OPPAY());
		int total1 = profitVo.getPR_RTPAY()+ingunfixing+monthPay+profitVo.getPR_OPPAY();
		int total2 = profitVo.getPR_MTPAY()+ingunVar;
		
		//allTotal
		int allTotal = total1+total2;
		resultMap.put("test", test);
		resultMap.put("ingunfixing", ingunfixing);
		resultMap.put("ingunVar", ingunVar);
		resultMap.put("monthPay", monthPay);
		resultMap.put("total1", total1);
		resultMap.put("total2", total2);
		resultMap.put("allTotal", allTotal);
		return resultMap;

		
	}
	
	
	//리턴값 : an_num
	
	private int insertAnalysisRes(AnalysisResVo anVo){
		return analysisService.insertAnalysisRes(anVo);
	}
	
	//리턴값 : reg_code
	private long insertAnalysisCode(Map<String, Object> data){
		return analysisService.insertAnalysisCode(data);
	}
	
	private int insertAnalysisRec(AnalysisRecVo arVo){
		return analysisService.insertAnalysisRec(arVo);
	}


	

	

	

}
