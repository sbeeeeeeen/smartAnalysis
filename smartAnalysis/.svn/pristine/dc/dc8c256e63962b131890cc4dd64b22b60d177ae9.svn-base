package kr.or.ddit.future.web;

import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;
import javax.xml.parsers.ParserConfigurationException;

import kr.or.ddit.analysis_res.model.AnalysisCodeVo;
import kr.or.ddit.analysis_res.model.AnalysisRecVo;
import kr.or.ddit.analysis_res.model.AnalysisResVo;
import kr.or.ddit.analysis_res.service.AnalysisResServiceInf;
import kr.or.ddit.analysis_res.web.XmlParsing;
import kr.or.ddit.facility.model.FacilityVo;
import kr.or.ddit.facility.service.FacilityServiceInf;
import kr.or.ddit.industry.model.IndustryVo;
import kr.or.ddit.industry.service.IndustryServiceInf;
import kr.or.ddit.member.model.MemberVo;
import kr.or.ddit.region.model.RegionVo;
import kr.or.ddit.region.service.RegionServiceInf;
import kr.or.ddit.rent.model.RentVo;
import kr.or.ddit.rent.service.RentServiceInf;
import kr.or.ddit.residential.model.ResidentialVo;
import kr.or.ddit.residential.service.ResidentialServiceInf;
import kr.or.ddit.train.model.TrainVo;
import kr.or.ddit.train.service.TrainServiceInf;

import org.json.JSONArray;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.xml.sax.SAXException;

@RequestMapping("/future")
@Controller("futureController")
public class FutureController {

	private Logger logger = LoggerFactory.getLogger(FutureController.class);

	@Resource(name = "industryService")
	private IndustryServiceInf industryService;

	@Resource(name = "analysisResService")
	private AnalysisResServiceInf analysisService;

	@Resource(name = "residentialService")
	private ResidentialServiceInf residentialService;

	@Resource(name = "regionService")
	private RegionServiceInf regionService;

	@Resource(name = "rentService")
	private RentServiceInf rentService;

	@Resource(name = "trainService")
	private TrainServiceInf trainService;

	@Resource(name = "facilityService")
	private FacilityServiceInf facilityService;

//	XmlParsing xmlparser = new XmlParsing(); // 바로 api 활용
	XmlParsing2 xmlparser2 = new XmlParsing2(); // 바로 api 활용

	// 미래지향 메인창, 대분류 보여줄수있음.
	@RequestMapping(value = "/view")
	public ModelAndView view() {

		ModelAndView mav = new ModelAndView("future");

		List<IndustryVo> Ind_lList = industryService.getInd_L();
		mav.addObject("Ind_lList", Ind_lList);

		return mav;
	}

	// 업종 중분류 선택
	@RequestMapping("/ind_l")
	public ModelAndView ind_lView(@RequestParam(value = "ind_l") String ind_l) {

		ModelAndView mav = new ModelAndView("jsonView");

		List<IndustryVo> Ind_mList = industryService.getIndustryM(ind_l);
		mav.addObject("Ind_mList", Ind_mList);

		return mav;
	}

	// 업종 중분류 선택
	@RequestMapping("/ind_m")
	public ModelAndView ind_mView(@RequestParam(value = "ind_m") String ind_m) {

		ModelAndView mav = new ModelAndView("jsonView");

		List<IndustryVo> Ind_sList = industryService.getIndustryS(ind_m);
		mav.addObject("Ind_sList", Ind_sList);

		return mav;
	}

	// 결과보기
	@RequestMapping("/result")
	public String result(@RequestParam("addr") String addr,
			@RequestParam("uj") List<String> ujList,
			@RequestParam(required = false, value = "radius") String radius,
			@RequestParam("latlngJson") String latlng, HttpSession session,
			Model model) throws ParseException {

		String mem_id = ((MemberVo) session.getAttribute("memberVo"))
				.getMem_id();

		// analysis_res insert
		AnalysisResVo anVo = new AnalysisResVo();
		anVo.setAn_div('4');
		anVo.setMem_id(mem_id);
		int an_num = insertAnalysisRes(anVo);

		List<String> indList = new ArrayList<String>();

		long reg_code = 0;
		// analysis_code insert
		for (String industry : ujList) {
			Map<String, Object> data = new HashMap<String, Object>();
			data.put("an_num", an_num);
			data.put("ind_code", industry);
			indList.add(industry);
			data.put("dong", addr.split(" ")[2]);
			reg_code = insertAnalysisCode(data);
		}
		List<IndustryVo> indNmList = new ArrayList<IndustryVo>();
		for (int i = 0; i < indList.size(); i++) {
			indNmList.add(industryService.getIndustryVo(indList.get(i)));
		}
		model.addAttribute("indList", indNmList);

		// analysis_rec insert
		JSONObject jsonobject = new JSONObject(latlng);
		JSONArray jsonArray = jsonobject.getJSONArray("latlng");
		for (int i = 0; i < jsonArray.length(); i++) {
			AnalysisRecVo arVo = new AnalysisRecVo();
			arVo.setAN_NUM(an_num);
			arVo.setAN_SHAPE(jsonArray.length() == 1 ? radius == null ? '1'
					: '2' : '3');
			arVo.setAN_RAD(radius == null ? 0 : Double.parseDouble(radius));
			arVo.setAN_COORX(jsonArray.getJSONObject(i).getDouble("lng"));
			arVo.setAN_COORY(jsonArray.getJSONObject(i).getDouble("lat"));
			insertAnalysisRec(arVo);
		}

		model.addAttribute("regionVo", regionService.getRegion(reg_code)); // 주소
																			// 표시

		List<AnalysisCodeVo> acVoList = analysisService.getAnalysisCodeVo(an_num);
		model.addAttribute("an_dt", acVoList.get(0).getAN_DT()); // 분석 시점

		// 거주인구 데이터 가져오기
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("reg_code", reg_code);
		for (int i = 1; i < 4; i++) { // 1부터 3까지 i
			map.put("rst_div", i); // rst_div에대한값을넣어줌
			List<ResidentialVo> residenList = residentialService
					.getResidential(map); // getResidential메서드에 map을 넣고 결과값가져옴..
			model.addAttribute("residentialList" + i, residenList);

			map.remove("rst_div");
		}

		// 거주인구 나이 데이터 가져오기
		List<ResidentialVo> residentialAgeList = residentialService
				.getResidentialAgeList(reg_code);
		model.addAttribute("residentialAgeList", residentialAgeList);

		// 임대료 데이터 가져오기
		int reg_gucode = regionService.getRegGuCode(reg_code);
		List<RentVo> rentDtList = rentService.getRentDt(reg_gucode);

		model.addAttribute("rentDtList", rentDtList); // 최신 날짜 데이터 출력에 필요한 리스트

		Map<String, Object> mapST = new HashMap<String, Object>();
		mapST.put("REG_GUCODE", reg_gucode);
		mapST.put("rent_stairs", "1층이상");
		List<RentVo> rentList1 = rentService.getRentStairs(mapST);
		mapST.put("rent_stairs", "2층이상");
		List<RentVo> rentList2 = rentService.getRentStairs(mapST);
		mapST.put("rent_stairs", "지하");
		List<RentVo> rentList3 = rentService.getRentStairs(mapST);
		List<RentVo> rentDateList = rentService.getRentDateList(reg_gucode);
		model.addAttribute("rentList1", rentList1);
		model.addAttribute("rentList2", rentList2);
		model.addAttribute("rentList3", rentList3);
		model.addAttribute("rentDateList", rentDateList);

		// 지하철 데이터 가져오기
		List<TrainVo> trainList = trainService.getTrain(reg_code);
		model.addAttribute("trainList", trainList); // 전체 지하철 데이터

		// 학교 시설 가져오기
		List<FacilityVo> schoolList = facilityService.getSchool(reg_gucode);
		model.addAttribute("schoolList", schoolList);

		// 학교 제외한 시설 가져오기
		List<FacilityVo> facilityList = facilityService.getFacility(reg_gucode);
		model.addAttribute("facilityList", facilityList);

		// 가장 많은 연령대 가져오기
		int MaxAge = residentialService.getMaxAge(reg_code);
		model.addAttribute("MaxAge", MaxAge);

		// 가장 많은 성별 가져오기
		int MaxDiv = residentialService.getMaxDiv(reg_code);
		model.addAttribute("MaxDiv", MaxDiv);

		// 잠재고객 가져오기
		String faciNm = facilityService.getFaci_nm(reg_gucode);
		model.addAttribute("faciNm", faciNm);

		// analysisres, recVo
		Map<String, Object> resultMap = new HashMap<String, Object>();
//		Map<String, Object> vosList = new HashMap<String, Object>();
//		resultMap.putAll(vosList = analysisService.getAnalysisVos(an_num));
		
		List<AnalysisRecVo> arVo = analysisService.getAnalysisRecList(an_num);
//		AnalysisResVo asVo = analysisService.getAnalysisRes(an_num);
		resultMap.put("analysisRecVo", arVo);
		
		try {
			//선택 지역 안에 업종 개수
			resultMap.putAll(xmlparser2.getstoreListInUpjong(acVoList, arVo));
//			resultMap.putAll(xmlparser.getstoreListInUpjong(acVoList, (List<AnalysisRecVo>)vosList.get("analysisRecVo")));
		} catch (ParserConfigurationException | SAXException | IOException e) {
			e.printStackTrace();
		}
		
		model.addAllAttributes(resultMap);
		

		return "futureResult";
	}

	// 이거 쓰세요 리턴값이 an_num
	private int insertAnalysisRes(AnalysisResVo anVo) {
		return analysisService.insertAnalysisRes(anVo);
	}

	// 리턴값 : reg_code
	private long insertAnalysisCode(Map<String, Object> data) {
		return analysisService.insertAnalysisCode(data);
	}

	private int insertAnalysisRec(AnalysisRecVo arVo) {
		return analysisService.insertAnalysisRec(arVo);
	}
	
	@RequestMapping("/futureResult")
	public String futureResult(@RequestParam("an_num")int an_num, Model model){
		List<AnalysisCodeVo> acVoList = analysisService.getAnalysisCodeVo(an_num);
		model.addAttribute("an_dt", acVoList.get(0).getAN_DT()); // 분석 시점
		RegionVo region = regionService.getRegion(acVoList.get(0).getREG_CODE());
		model.addAttribute("regionVo", regionService.getRegion(region.getReg_code()));
		List<IndustryVo> indList = new ArrayList<IndustryVo>();
		for(AnalysisCodeVo acVo : acVoList){
			indList.add(industryService.getIndustryVo(acVo.getIND_CODE()));
		}
		model.addAttribute("indList", indList);
		model.addAttribute("regionVo", regionService.getRegion(acVoList.get(0).getREG_CODE()));
		model.addAttribute("an_dt", acVoList.get(0).getAN_DT());
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("reg_code", region.getReg_code());
		for (int i = 1; i < 4; i++) { // 1부터 3까지 i
			map.put("rst_div", i); // rst_div에대한값을넣어줌
			List<ResidentialVo> residenList = residentialService
					.getResidential(map); // getResidential메서드에 map을 넣고 결과값가져옴..
			model.addAttribute("residentialList" + i, residenList);

			map.remove("rst_div");
		}
		List<ResidentialVo> residentialAgeList = residentialService
				.getResidentialAgeList(region.getReg_code());
		model.addAttribute("residentialAgeList", residentialAgeList);
		// 임대료 데이터 가져오기
		int reg_gucode = regionService.getRegGuCode(region.getReg_code());
		List<RentVo> rentDtList = rentService.getRentDt(reg_gucode);
	
		model.addAttribute("rentDtList", rentDtList); // 최신 날짜 데이터 출력에 필요한 리스트
	
		Map<String, Object> mapST = new HashMap<String, Object>();
		mapST.put("REG_GUCODE", reg_gucode);
		mapST.put("rent_stairs", "1층이상");
		List<RentVo> rentList1 = rentService.getRentStairs(mapST);
		mapST.put("rent_stairs", "2층이상");
		List<RentVo> rentList2 = rentService.getRentStairs(mapST);
		mapST.put("rent_stairs", "지하");
		List<RentVo> rentList3 = rentService.getRentStairs(mapST);
		List<RentVo> rentDateList = rentService.getRentDateList(reg_gucode);
		model.addAttribute("rentList1", rentList1);
		model.addAttribute("rentList2", rentList2);
		model.addAttribute("rentList3", rentList3);
		model.addAttribute("rentDateList", rentDateList);
	
		// 지하철 데이터 가져오기
		List<TrainVo> trainList = trainService.getTrain(region.getReg_code());
		model.addAttribute("trainList", trainList); // 전체 지하철 데이터
	
		// 학교 시설 가져오기
		List<FacilityVo> schoolList = facilityService.getSchool(reg_gucode);
		model.addAttribute("schoolList", schoolList);
	
		// 학교 제외한 시설 가져오기
		List<FacilityVo> facilityList = facilityService.getFacility(reg_gucode);
		model.addAttribute("facilityList", facilityList);
	
		// 가장 많은 연령대 가져오기
		int MaxAge = residentialService.getMaxAge(region.getReg_code());
		model.addAttribute("MaxAge", MaxAge);
	
		// 가장 많은 성별 가져오기
		int MaxDiv = residentialService.getMaxDiv(region.getReg_code());
		model.addAttribute("MaxDiv", MaxDiv);
	
		// 잠재고객 가져오기
		String faciNm = facilityService.getFaci_nm(reg_gucode);
		model.addAttribute("faciNm", faciNm);
	
		// analysisres, recVo
		Map<String, Object> resultMap = new HashMap<String, Object>();
	//				Map<String, Object> vosList = new HashMap<String, Object>();
	//				resultMap.putAll(vosList = analysisService.getAnalysisVos(an_num));
		
		List<AnalysisRecVo> arVo = analysisService.getAnalysisRecList(an_num);
	//				AnalysisResVo asVo = analysisService.getAnalysisRes(an_num);
		resultMap.put("analysisRecVo", arVo);
		
		try {
			//선택 지역 안에 업종 개수
			resultMap.putAll(xmlparser2.getstoreListInUpjong(acVoList, arVo));
	//					resultMap.putAll(xmlparser.getstoreListInUpjong(acVoList, (List<AnalysisRecVo>)vosList.get("analysisRecVo")));
		} catch (ParserConfigurationException | SAXException | IOException e) {
			e.printStackTrace();
		}
		
		model.addAllAttributes(resultMap);
		return "futureResult";
	}
	
	@RequestMapping("/reFuture")
	public String reFuture(@RequestParam("an_num") int an_num, Model model){
		model.addAttribute("Ind_lList", industryService.getInd_L());
		//좌표 등등 리스트
		List<AnalysisRecVo> analysisrecList = analysisService.getAnalysisRecList(an_num);
		model.addAttribute("analysisrecList", analysisrecList);
		//업종
		List<AnalysisCodeVo> acVoList = analysisService.getAnalysisCodeVo(an_num);
		List<String> indcodeList = new ArrayList<String>();
		for(AnalysisCodeVo acVo : acVoList){
			indcodeList.add(acVo.getIND_CODE());
		}
		model.addAttribute("indcodeList", indcodeList);
		model.addAttribute("indli", industryService.getIndustryStr(indcodeList));
		return "future";
	}
		
}
