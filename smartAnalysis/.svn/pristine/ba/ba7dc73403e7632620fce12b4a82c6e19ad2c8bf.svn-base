package kr.or.ddit.future.web;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import kr.or.ddit.analysis_res.model.AnalysisCodeVo;
import kr.or.ddit.analysis_res.model.AnalysisRecVo;
import kr.or.ddit.analysis_res.model.StoreVo;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class XmlParsing2 {
	//페이지에 접근해줄 Document객체 생성
	private DocumentBuilderFactory dbFactoty = DocumentBuilderFactory.newInstance();
	private final String KEY = "qFxwY7cE9FVYVQtzCgEJ0ZVpBB55tmobF4PsGSKvhvA5roJjnXiH%2FJ%2BLjDGjKVFMi%2BtmdAWW3TT1X4E6GYU2QA%3D%3D";
	
	private static String getTagValue(String tag, Element eElement) { // tag값의 정보를 가져오는 메소드
	    NodeList nlList = eElement.getElementsByTagName(tag).item(0).getChildNodes(); //xml안에 
	    Node nValue = (Node) nlList.item(0);
	    if(nValue == null) 
	        return null;
	    return nValue.getNodeValue();
	}
	
	//행정동에 해당하는 업소 개수
	public Map<String, Object> getstoreListInUpjong(List<AnalysisCodeVo> acVo, List<AnalysisRecVo> list) throws ParserConfigurationException, SAXException, IOException{
		
		
		String userIndsLclsCd = acVo.get(0).getIND_CODE().substring(0,1); //사용자가 고른거..대분류코드
		String userIndsMclsCd = acVo.get(0).getIND_MCODE(); //사용자가 고른거..중분류코드
		List<String> userIndsSclsCdList = new ArrayList<String>(); //사용자가 고른 소분류코드 리스트
		for (int i = 0; i < acVo.size(); i++) { // 소분류 코드 리스트 뽑는 과정
			userIndsSclsCdList.add(acVo.get(i).getIND_CODE());
		}
		
		
		
		Map<String, Object> map = new HashMap<String, Object>();
		String url = "";
		switch(list.get(0).getAN_SHAPE()){
		case '1': //마커
			long reg_code = acVo.get(0).getREG_CODE(); //지역코드(행정동)
			String divId = "adongCd";
			url = "http://apis.data.go.kr/B553077/api/open/sdsc/storeStatsUpjongInAdmi?divId="+divId+"&key="+reg_code+"&ServiceKey="+KEY;
			break;
		case '2': //반경
			double radius = list.get(0).getAN_RAD();
			double an_coorx = list.get(0).getAN_COORX();
			double an_coory = list.get(0).getAN_COORY();
			url = "http://apis.data.go.kr/B553077/api/open/sdsc/storeStatsUpjongInRadius?radius="+radius+"&cx="+an_coorx+"&cy="+an_coory+"&ServiceKey="+KEY;
			break;
		case '3': //다각
			String coor = "";
			for(int i=0; i<list.size(); i++){
				coor += list.get(i).getAN_COORX()+" "+list.get(i).getAN_COORY();
				if(i!=list.size()-1) coor+=",";
			}
			url = "http://apis.data.go.kr/B553077/api/open/sdsc/storeStatsUpjongInPolygon?key=POLYGON (("+coor+"))&ServiceKey="+KEY;
			break;
		}
		
		DocumentBuilder dBuilder = dbFactoty.newDocumentBuilder();
		dbFactoty = DocumentBuilderFactory.newInstance();
		
		Document doc = dBuilder.parse(url);

		// root tag, 페이지에 접근해줄 Document객체 생성
		doc.getDocumentElement().normalize();
		//doc.getDocumentElement().getNodeName())를 출력하면 위 XML의 최상위 tag값을 가져온다. 
		System.out.println("Root element: " + doc.getDocumentElement().getNodeName()); // Root element: result
		
		// 파싱할 데이터는 item 안에 있음?
		NodeList nList = doc.getElementsByTagName("item"); // xml 속 item 리스트
		//System.out.println("파싱할 리스트 수 : "+ nList.getLength());
		
		List<StoreVo> storeList = new ArrayList<StoreVo>();
		for(int temp = 0; temp < nList.getLength(); temp++){
			Node nNode = nList.item(temp); // 노드리스트에서 아이템하나를 노드로 빼기 -- 완벽이해 x
			
			if(nNode.getNodeType() == Node.ELEMENT_NODE){
				Element eElement = (Element) nNode; //노드를 엘리멘트로 빼기 -- 완벽이해 x
				String indsLclsCd = getTagValue("indsLclsCd", eElement); //입력한 tag 정보 // 대분류 코드
				String indsMclsCd = getTagValue("indsMclsCd", eElement);
				if(indsLclsCd.equals("Q")){
					
				}
				else if(indsLclsCd.equals("F")){
					
				}
				else if(indsLclsCd.equals("D")){
					
				}
				if(indsLclsCd.equals(userIndsLclsCd)){ //tag에서 가져온 대분류 코드와 내가 고른 대분류코드가 일치 할 시 
					
				}
				if(indsMclsCd.equals(userIndsMclsCd)){
					
				}
				
			}	// if end
		}	// for end
		map.put("storeList", storeList);
//		List<Integer> getstoreListInUpjong = new ArrayList<Integer>();
//		if(userIndsLclsCd.equals("Q")||userIndsLclsCd.equals("F")||userIndsLclsCd.equals("D")) { //userIndsLclsCd = 사용자가 고른거..대분류코드
//			getstoreListInUpjong.add(q+f+d);
//		}else {
//			getstoreListInUpjong.add(q+f+d+uL);
//		}
//		getstoreListInUpjong.add(q);
//		getstoreListInUpjong.add(f);
//		getstoreListInUpjong.add(d);
//		getstoreListInUpjong.add(uL);
//		map.put("getstoreListInUpjong", getstoreListInUpjong);
		return map;
	}
	
}
