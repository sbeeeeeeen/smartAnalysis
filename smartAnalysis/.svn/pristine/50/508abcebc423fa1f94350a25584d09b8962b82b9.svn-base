<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<!DOCTYPE html>
<html lang="en">

<head>
<title>CDN Hospital</title>
<meta charset="utf-8">
<script type="text/javascript" src="/Moderna/js/jquery.js"></script>
<link
	href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css"
	rel="stylesheet">

<style>
.btn-outline-primary {
	color: #2780E3;
	background-color: transparent;
	background-image: none;
	border-color: #2780E3;
}

.btn-outline-primary:hover {
	color: #fff;
	background-color: #2780E3;
	border-color: #2780E3;
}

.btn-outline-primary:focus, .btn-outline-primary.focus {
	-webkit-box-shadow: 0 0 0 0.2rem rgba(39, 128, 227, 0.5);
	box-shadow: 0 0 0 0.2rem rgba(39, 128, 227, 0.5);
}

.btn-outline-primary.disabled, .btn-outline-primary:disabled {
	color: #2780E3;
	background-color: transparent;
}

.btn-outline-primary:not (:disabled ):not (.disabled ):active,
	.btn-outline-primary:not (:disabled ):not (.disabled ).active, .show>.btn-outline-primary.dropdown-toggle
	{
	color: #fff;
	background-color: #2780E3;
	border-color: #2780E3;
}

.btn-outline-primary:not (:disabled ):not (.disabled ):active:focus,
	.btn-outline-primary:not (:disabled ):not (.disabled ).active:focus,
	.show>.btn-outline-primary.dropdown-toggle:focus {
	-webkit-box-shadow: 0 0 0 0.2rem rgba(39, 128, 227, 0.5);
	box-shadow: 0 0 0 0.2rem rgba(39, 128, 227, 0.5);
}

.btn-primary {
	color: #fff;
	background-color: #2780E3;
	border-color: #2780E3;
}

.btn-primary:hover {
	color: #fff;
	background-color: #1a6dca;
	border-color: #1967be;
}

.btn-primary:focus, .btn-primary.focus {
	-webkit-box-shadow: 0 0 0 0.2rem rgba(39, 128, 227, 0.5);
	box-shadow: 0 0 0 0.2rem rgba(39, 128, 227, 0.5);
}

.btn-primary.disabled, .btn-primary:disabled {
	color: #fff;
	background-color: #2780E3;
	border-color: #2780E3;
}

.btn-primary:not (:disabled ):not (.disabled ):active, .btn-primary:not
	 (:disabled ):not (.disabled ).active, .show>.btn-primary.dropdown-toggle
	{
	color: #fff;
	background-color: #1967be;
	border-color: #1761b3;
}

.btn-primary:not (:disabled ):not (.disabled ):active:focus,
	.btn-primary:not (:disabled ):not (.disabled ).active:focus, .show>.btn-primary.dropdown-toggle:focus
	{
	-webkit-box-shadow: 0 0 0 0.2rem rgba(39, 128, 227, 0.5);
	box-shadow: 0 0 0 0.2rem rgba(39, 128, 227, 0.5);
}

.bg-primary {
	background-color: #000000 !important;
	/*    -webkit-box-shadow: 0 0 0 0.2rem rgba(39, 128, 227, 0.5); */
	/* 	box-shadow: 0 0 0 0.2rem rgba(39, 128, 227, 0.5); */
}

.page-header {
	padding-bottom: 30px;
	margin: 40px 0 20px;
	border-bottom: 1px solid #eee;
}

/*//////////////////////////////////////////  */
.btn-warning {
	color: #fff;
	background-color: #FF7518;
	border-color: #FF7518;
}

.btn-warning:hover {
	color: #fff;
	background-color: #f16100;
	border-color: #e45c00;
}

.btn-warning:focus, .btn-warning.focus {
	-webkit-box-shadow: 0 0 0 0.2rem rgba(255, 117, 24, 0.5);
	box-shadow: 0 0 0 0.2rem rgba(255, 117, 24, 0.5);
}

.btn-warning.disabled, .btn-warning:disabled {
	color: #fff;
	background-color: #FF7518;
	border-color: #FF7518;
}

.btn-warning:not (:disabled ):not (.disabled ):active, .btn-warning:not
	 (:disabled ):not (.disabled ).active, .show>.btn-warning.dropdown-toggle
	{
	color: #fff;
	background-color: #e45c00;
	border-color: #d75700;
}

.btn-warning:not (:disabled ):not (.disabled ):active:focus,
	.btn-warning:not (:disabled ):not (.disabled ).active:focus, .show>.btn-warning.dropdown-toggle:focus
	{
	-webkit-box-shadow: 0 0 0 0.2rem rgba(255, 117, 24, 0.5);
	box-shadow: 0 0 0 0.2rem rgba(255, 117, 24, 0.5);
}
/*====================================================================================  */
.local-video {
	width: 165px;
	height: 165px;
}

.remote-video {
	width: 320px;
	height: 240px;
}

@media ( min-width : 992px) {
	.remote-video {
		width: 640px;
		height: 480px;
	}
}

.chat-timeline {
	height: 200px;
	font-size: 9px;
	overflow: auto;
}

.chat-timeline .local {
	color: blue;
}

.chat-timeline .remote {
	color: red;
}

@media ( min-width : 992px) {
	.channel-list {
		font-size: 0.8em;
	}
}
</style>
</head>

<body>
	<div class="container">
		<div class="row">
			<!-- style="background-color: #2780E3; color:#ffffff;" h1임시 css -->
			<div class="col-md-12 center">
				<h1 class="page-header" style="border-radius: 3px">
					<strong>소상공인 컨설팅</strong>
				</h1>
			</div>

			<div class="col-md-6 col-md-offset-3 hide">
				<div class="alert alert-info alert-dismissible" role="alert">
					<button type="button" class="close" data-dismiss="alert"
						aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
					...
				</div>
			</div>
		</div>

		<div class="row">
			<div class="col-lg-2 b">

				<h2 class="h3">Profile/Config</h2>

				<p class="clearfix"></p>
				<!-- 간격 벌리기 -->

				<form>
					<div class="form-group">
						<input class="form-control" type="hidden" id="userId"
							placeholder="Enter your user id." value="${mem_id }">
						<input class="form-control" type="hidden" id="mem_chid"
							placeholder="Enter your user id." value="${mem_chid}">
							
					</div>
				</form>

				<p class="clearfix"></p>
				<!-- 간격 벌리기 -->

				<h2 class="h3">Channel</h2>
				<h3 class="h4">Create</h3>
				<form>
					<div class="from-gruop">
						<input class="form-control" type="text" id="createChannelId"
							placeholder="Create and connect the channel." value=""
							readonly=""> <label class="sr-only" for="createChannelId">Channel
							Id</label>
					</div>
					<c:if test="${mem_type eq '3' }">
					<button class="btn btn-outline-primary btn-sm btn-block"
						id="createChannel">
						<span class="glyphicon glyphicon-phone-alt" aria-hidden="true"></span>
						Create
					</button>
					</c:if>
				</form>
				<button class="btn btn-primary btn-sm btn-block"
					id="disconnectChannel">
					<span class="glyphicon glyphicon-stop" aria-hidden="true"></span>
					Disconnect
				</button>

				<h3 class="h4">Channel List</h3>
				<div class="list-group channel-list" id="channelList"></div>

				<button class="btn btn-default btn-sm pull-right btn-warning"
					id="refreshChannel">
					<span class="glyphicon glyphicon-refresh" aria-hidden="true"></span>
					Refresh
				</button>
			</div>

			<div class="col-md-7">
				<h2 class="h3">Remote</h2>
				<div class="well">
					<video class="remote-video center-block" id="remoteVideo"></video>
					<!-- 이 외지 비디오 태그는 실제로 Callee의 얼굴 영상이 나타날 곳 입니다. 
				이 Video 태그에 PlayRTC 자바스크립트 라이브러리의 객체가 영상을 연결(bind)합니다.
				
			 -->
					<div class="text-center hide">
						<button class="btn btn-default btn-sm" id="saveFileFromRemote">
							<span class="glyphicon glyphicon-download-alt" aria-hidden="true"></span>
							Save
						</button>
					</div>

					<div class="text-center">
						<span class="glyphicon glyphicon-facetime-video"
							aria-hidden="true"></span>
						<div class="btn-group" role="group" aria-label="...">
							<button class="btn btn-default btn-sm"
								id="startRemoteVideoRecord">
								<span class="glyphicon glyphicon-record" aria-hidden="true"></span>
								Record
							</button>
							<button class="btn btn-default btn-sm" id="stopRemoteVideoRecord">
								<span class="glyphicon glyphicon-stop" aria-hidden="true"></span>
								Stop
							</button>
							<button class="btn btn-default btn-sm" id="saveRemoteVideoRecord">
								<span class="glyphicon glyphicon-download-alt"
									aria-hidden="true"></span> Save
							</button>
						</div>
					</div>
				</div>

			</div>
			<div class="col-md-3">
				<h2 class="h3">Local</h2>
				<div class="well">
					<video class="local-video center-block" id="localVideo" muted></video>
					<!--  자신의 화면을 표시할 비디오 태그를 보면 mute 라는 속성을 주고 있음을 볼 수 있습니다.
			 반드시 자신의 비디오는 mute 를 해야만 합니다. 그렇지 않으면, 
			마이크로 들어간 자신의 음성이 다시 자신의 비디오로 재생되어 하울링이 발생하게 됩니다. -->
					<div class="progress" id="sendFileToRemoteBarWrapper">
						<div class="progress-bar" id="sendFileToRemoteBar"
							role="progressbar" aria-valuenow="0" aria-valuemin="0"
							aria-valuemax="100" style="width: 0px;">
							<!--<span class="sr-only">60% Complete</span>-->
							<!-- 진행바 progress-bar aria-valuenow는 현재0 , min 최소값 max 는 최대값 -->
						</div>
					</div>

					<div class="text-center">
						<!-- glyphicon 아이콘 임 -->
						<span class="glyphicon glyphicon-facetime-video"
							aria-hidden="true"></span>
						<div class="btn-group" role="group" aria-label="...">
							<button class="btn btn-default btn-sm" id="startLocalVideoRecord">
								<span class="glyphicon glyphicon-record" aria-hidden="true"></span>
								Record
							</button>
							<button class="btn btn-default btn-sm" id="stopLocalVideoRecord">
								<span class="glyphicon glyphicon-stop" aria-hidden="true"></span>
								Stop
							</button>
							<button class="btn btn-default btn-sm" id="saveLocalVideoRecord">
								<span class="glyphicon glyphicon-download-alt"
									aria-hidden="true"></span> Save
							</button>
						</div>
					</div>

				</div>

				<div class="well chat-timeline" id="timeline"
					style="overflow: auto;"></div>

				<form>
					<label class="sr-only" for="sendMessage">Transfer Message</label>
					<div class="input-group input-group-sm">
						<div class="input-group-addon">
							<span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>
						</div>
						<input type="text" class="form-control" id="sendMessage"
							placeholder="Enter your message."> <span
							class="input-group-btn">
							<button class="btn btn-default btn-warning" id="sendText">
								<span class="glyphicon glyphicon-send" aria-hidden="true"></span>
								Send
							</button>
						</span>
					</div>
				</form>

				<form class="form-inline">
					<div class="row">
						<div class="col-md-8">
							<label class="sr-only" for="selectFile">Choose File</label> <input
								type="file" id="selectFile">
						</div>
						<div class="col-md-4">
							<button class="btn btn-default btn-xs pull-right " id="sendFile">
								<span class="glyphicon glyphicon-send" aria-hidden="true"></span>
								Send
							</button>
						</div>
					</div>
				</form>

			</div>
		</div>
	</div>

	<!--<script src="//code.jquery.com/jquery-2.1.3.min.js"></script>-->
	<!--<script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>-->
	<!-- playRTC 스크립트 적용한 부분 -->
	<script src="//www.playrtc.com/sdk/js/playrtc.js"></script>
	<!--<script src="js/playrtc.js"></script>-->
	<script>
		'use strict';
		var mem_chid = document.querySelector('#mem_chid');;
		var createChannelButton = document.querySelector('#createChannel');
		//채널생성 querySelector 문서의 첫번 째 요소 선택
		var createChannelIdInput = document.querySelector('#createChannelId');
		//채널아이디 생성
		var refreshChannelButton = document.querySelector('#refreshChannel');
		//채널 새로 고침
		var channelList = document.querySelector('#channelList');
		//채널 목록
		var getChannelList;
		//채널 목록을 가져 올 때 담아줄 수 있는 변수
		var disconnectChannelButton = document
				.querySelector('#disconnectChannel');
		//연결 끊기 버튼
		var startRemoteVideoRecordButton = document
				.querySelector('#startRemoteVideoRecord');
		//외지 비디오 녹화 시작 버튼
		var stopRemoteVideoRecordButton = document
				.querySelector('#stopRemoteVideoRecord');
		//외지 비디오 녹화 정지 버튼
		var saveRemoteVideoRecordButton = document
				.querySelector('#saveRemoteVideoRecord');
		//외지 비디오 녹화 저장 버튼
		var startLocalVideoRecordButton = document
				.querySelector('#startLocalVideoRecord');
		//로컬 비디오 녹화 시작 버튼
		var stopLocalVideoRecordButton = document
				.querySelector('#stopLocalVideoRecord');
		//로컬 비디오 녹화 정지 버튼
		var saveLocalVideoRecordButton = document
				.querySelector('#saveLocalVideoRecord');
		//로컬 비디오 녹화 저장 버튼
		var chattingTimeline = document.querySelector('#timeline');
		//채팅 타임 라인
		var sendMessageInput = document.querySelector('#sendMessage');
		//메세지 인풋 센드
		var selectFileInput = document.querySelector('#selectFile');
		//넣을 파일 선택
		var sendTextButton = document.querySelector('#sendText');
		//텍스트 보내기 버튼
		var sendFileButton = document.querySelector('#sendFile');
		//파일 보내기 버튼
		var sendFileToRemoteBar = document
				.querySelector('#sendFileToRemoteBar');
		//파일보내기 외지의 바 로
		var sendFileToRemoteBarWrapper = document
				.querySelector('#sendFileToRemoteBarWrapper');
		//파일 보내기 외지의 바 로 랩퍼
		var remoteVideo = document.querySelector('#remoteVideo');
		//외지 비디오 요소
		var localVideo = document.querySelector('#localVideo');
		//로컬 비디오 요소
		var recordedRemoteVideoBlob;
		//녹화된 외지의 비디오 Binary Large Object BLOB
		var recordedRemoteVoiceBlob;
		//녹화된 외지의 음성 Binary Large Object BLOB
		var recordedLocalVideoBlob;
		//녹화된 로컬 비디오 Binary Large Object BLOB
		var recordedLocalVoiceBlob;
		//녹화된 로컬 음성 Binary Large Object BLOB
		var userIdInput = document.querySelector('#userId');
		//유저의 아이디 삽입
		var userId;
		//유저의 아이디
		var app;
		//PlayRTC 객체를 저장하기 위한 요소

		//키를 인증해서 새로운 PlayRTC객체를 생성하기 위한 과정
		app = new PlayRTC({
			projectKey : '60ba608a-e228-4530-8711-fa38004719c1',
			localMediaTarget : 'localVideo',
			remoteMediaTarget : 'remoteVideo'
		});
		//채널 목록을 가져오는 펑션==============================================================
		getChannelList = function() {
			app.getChannelList(function(result) {
				var channels = result.channels;
				var channelsLength = channels.length;
				while (channelList.hasChildNodes()) {
					channelList.removeChild(channelList.firstChild);
				}
				for (var i = 0; i < channelsLength; i++) {
					var channelListAnchor = document.createElement('a');
					var linkIcon = document.createElement('span');
					channelListAnchor.classList.add('list-group-item');
					channelListAnchor.setAttribute('data-channelid',
							channels[i].channelId);
					channelListAnchor.textContent = channels[i].channelId;
					linkIcon.classList.add('glyphicon', 'glyphicon-menu-right',
							'pull-right');
					linkIcon.setAttribute('aria-hidden', 'true');
					channelListAnchor.appendChild(linkIcon);
					channelList.appendChild(channelListAnchor);
				}
			});
		}
		getChannelList(); // 채널 목록 가져오기 호출
		//PlayRTC의 on 메서드 호출 채널 연결
		app.on('connectChannel', function(channelId) {
			createChannelIdInput.value = channelId;
			getChannelList();
		});
		//PlayRTC의 on 메서드 호출 채널 끊기
		app.on('disconnectChannel', function(channelId) {
			createChannelIdInput.value = ''; //크리에이트 채널 아이디 인풋의 값을 ''빈칸으로 만들기
			while (chattingTimeline.hasChildNodes()) { //채팅 타임라인에 자식노드가 있을때 까지
				chattingTimeline.removeChild(chattingTimeline.firstChild);
				//채팅 타임라인에 자식노드를 지운다 첫번째 노드를
			}
			getChannelList();
		});
		//다른 끊긴 채널 
		app.on('otherDisconnectChannel', function(channelId) {
			remoteVideo.src = ''; //외지 비디오 src를 지운다
			while (chattingTimeline.hasChildNodes()) { ////채팅 타임라인에 자식노드가 있을때 까지
				chattingTimeline.removeChild(chattingTimeline.firstChild);
				//채팅 타임라인에 자식노드를 지운다 첫번째 노드를
			}
			getChannelList();
		});
		//PlayRTC객체에 데이타 스트림을 추가한다 
		app.on('addDataStream', function(pid, uid, dataChannel) { //pid,uid,데이터채널을가지고 온다 스트림생성
			dataChannel.on('message', function(message) {
				var chatParagraph;
				if (message.type === 'text') { // 메세지 타입이 텍스트 이면 === 은 글자까지 text
					chatParagraph = document.createElement('p'); //p요소를 생성합니다 챗 파라그래프에 
					chatParagraph.classList.add('local');
					//classList 속성은 요소의 클래스 이름을 DOMTokenList 객체로 반환합니다.
					//classList 속성은 읽기 전용이다.
					//classList 에 'local'을 추가한다.
					chatParagraph.textContent = message.data;

					chattingTimeline.appendChild(chatParagraph);
					//채팅타임라인에 어펜드 시킨다 자식을(chatParagraph)
				} else if (message.type === 'binary') { // 메세지 타입이 바이너리 이면
					PlayRTC.utils.fileDownload(message.blob, message.fileName);
					//PlayRTC의 utils의 fileDownload 펑션 호출 (blob과 메세지 파일이름을 가지고)
					sendFileToRemoteBar.style.width = '0px';
					//파일 보내기 넓이를 0px로 해서 안보이게
				}
			});
			dataChannel.on('progress', function(message) { //프로그레스 관련 펑션 이해 미달;
				var width = sendFileToRemoteBarWrapper.clientWidth;
				//
				var progressbar = (width / message.fragCount)
						* (message.fragIndex + 1);
				if (message.totalSize === message.fragSize) {
					return;
				}
				sendFileToRemoteBar.style.width = progressbar + 'px';
			});
			dataChannel.on('error', function(event) {
				alert('ERROR. See the log.');
			});
		});
		refreshChannelButton.addEventListener('click', function(event) {
			event.preventDefault(); //다른 이벤트 발생 못하게 방지
			getChannelList(); //채널 목록 가져오기 호출
		}, false);
		channelList.addEventListener('click', function(event) {
			var channelId = event.target.dataset.channelid;
			//채널 리스트 클릭시 채널 아이디에 클릭했던 타겟 채널 아이디를 을 데이터셋 시킨다 채널 아이디에
			userId = userIdInput.value;
			
			alert(userId);
			//상단에 설정 했던 첫번 째 유저 아이디를 가져온다
				if(mem_chid==channelId){ //할당 된 채널아이디인지 검사
				app.connectChannel(channelId, { // PlayRTC 의 채널 연결 부분이다
					peer : {
						uid : userId
					}
				});
				}else{
					alert("할당된 채널 아이디가 아닙니다. 다시 확인해 주세요");
				}
		}, false);
		createChannelButton.addEventListener('click', function(event) {
			//채널 생성 버튼을 눌렀을 시에 이벤트 이다.
			event.preventDefault();
			//다른 이벤트가 동작되지 않게 방지한다.
			userId = userIdInput.value;
			//상단에 설정 했던 첫번 째 유저 아이디를 가져온다
			app.createChannel({ // PlayRTC 의 채널 연결 부분이다
				peer : {
					uid : userId
				}
			})
		}, false);
		disconnectChannelButton.addEventListener('click', function(event) {
			event.preventDefault(); //브라우저의 행동을 막고 클릭 이벤트만 동작되게 한다.
			app.disconnectChannel(); //PlayRTC의 채널 끊기 펑션 호출
		}, false);

		//========================외지 비디오 녹화 관련============================================
		startRemoteVideoRecordButton.addEventListener('click', function(event) {
			//외지 비디오 녹화 시작 버튼 의 이벤트 
			var peers = app.getAllPeer();
			//peer 요소에 PlayRTC 의 모든 peer를 저장
			var hasPeers = peers.length > 0;
			//hasPeers 에 피어 길이 저장
			var firstPeerMedia = peers[0].getMedia();
			//첫 번째 피어의 미디어를 저장
			event.preventDefault();
			//브라우저의 다른 동작 방지
			if (hasPeers) { // 만약 hasPeers의 길이가 true라면
				firstPeerMedia.record(); // 이부분 잘 모르겠음 ========================================
				//퍼스트 미디어 피어에 녹화 내장 객체가 있는것 같음
			}
		}, false);
		stopRemoteVideoRecordButton.addEventListener('click', function(event) {
			//외지 비디오 녹화 중지 버튼 이벤트
			var peers = app.getAllPeer();
			var hasPeers = peers.length > 0;
			var firstPeerMedia = peers[0].getMedia();
			event.preventDefault();
			if (hasPeers) {
				firstPeerMedia.recordStop(function(blob) {
					recordedRemoteVideoBlob = blob;
					//외지 비디오 녹화 Binart large Object 를 나타내는 요소에 recordStop 내장 펑션에서 가져온 blob을 저장
				});
			}
		}, false);
		saveRemoteVideoRecordButton.addEventListener('click', function(event) {
			//외지 비디오 녹화 저장 버튼
			event.preventDefault();
			if (recordedRemoteVideoBlob) {
				PlayRTC.utils.fileDownload(recordedRemoteVideoBlob,
						'remote-video.webm');
				//PlayRTC 의 파일 다운로드   
				//webm은 로열티 비용이 없는 개방형 고화질 영상 압축 형식의 영상 포맷이며 HTML5 비디오와 함께 이용한다.
			}
		}, false);
		//========================로컬 비디오 녹화 관련============================================
		startLocalVideoRecordButton.addEventListener('click', function(event) {
			var media = app.getMedia();
			event.preventDefault();
			if (media) {
				media.record();
			}
		}, false);
		stopLocalVideoRecordButton.addEventListener('click', function(event) {
			var media = app.getMedia();
			event.preventDefault();
			if (media) {
				media.recordStop(function(blob) {
					recordedLocalVideoBlob = blob;
				});
			}
		}, false);
		saveLocalVideoRecordButton.addEventListener('click', function(event) {
			event.preventDefault();
			if (recordedLocalVideoBlob) {
				PlayRTC.utils.fileDownload(recordedLocalVideoBlob,
						'local-video.webm');
			}
		}, false);
		//========================================================================
		sendTextButton.addEventListener('click', function(event) {
			var chatParagraph;
			//타임라인에 저장할 채팅 단락 p요소랑 remote요소를 다 추가해서 저장하는 것이다.
			var mem_id = userIdInput.value;
			var message = mem_id+ " : " + sendMessageInput.value;
			event.preventDefault();
			if (message) {
				app.sendText(message);
				//PlayRTC의 내장 객체를 이용해서 메세지 전송
				chatParagraph = document.createElement('p');
				chatParagraph.classList.add('remote');
				chatParagraph.textContent = message;
				chattingTimeline.appendChild(chatParagraph);
			}
			sendMessageInput.value = '';
		}, false);
		//파일 전송 버튼 이벤트
		sendFileButton.addEventListener('click', function(event) {
			var myFile = selectFileInput.files[0];
			//myFile 요소에 상단에서 정해준 파일을 배열에 넣음
			event.preventDefault();
			if (!myFile) { //파일 요소가 없다면 리턴 false
				return false;
			}
			app.sendFile(myFile); //PlayRTC의 내장 객체 senFile을 이용해 myFile요소를 전송
			selectFileInput.value = '';
			//selectFileInput 상단에서 정해준 요소를 '' 빈칸으로 만듦
		}, false);
	</script>
</body>

</html>