package kr.or.ddit.a_main.web;

import java.io.IOException;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpSession;
import javax.websocket.EndpointConfig;
import javax.websocket.OnClose;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.ServerEndpoint;

import kr.or.ddit.member.model.MemberVo;

@ServerEndpoint(value="/chat", configurator = GetHttpSessionForWebSocket.class)
public class Broadsocket {

	private static Set<Session> clients = Collections.synchronizedSet(new HashSet<Session>());
	
//	public static final Map<Session, HttpSession> sessions = java.util.Collections.synchronizedMap(new java.util.HashMap<Session, HttpSession>());
	
	@OnMessage
	public void onMessage(String message, Session session) throws IOException {
		System.out.println("메세지 : "+message);
		System.out.println("세션 : "+session);
		synchronized (clients) {
			// Iterate over the connected sessions
			// and broadcast the received message
			for (Session client : clients) {
				if (!client.equals(session)) {
					client.getBasicRemote().sendText(message);
				}
			}
		}
	}

	@OnOpen
	public void onOpen(Session session, EndpointConfig config) {
		// Add session to the connected sessions set
		HttpSession hss = (HttpSession) config.getUserProperties().get(HttpSession.class.getName());
		System.out.println(((MemberVo)hss.getAttribute("memberVo")).getMem_id());
		clients.add(session);
	}

	@OnClose
	public void onClose(Session session) {
		// Remove session from the connected sessions set
		clients.remove(session);
	}
}